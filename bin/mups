#!/usr/bin/env node

var path = require('path');
var cjson = require('cjson');
var Config = require('../lib/config');
var ActionsRegistry = require('../lib/actions');
var helpers = require('../lib/helpers');
require('colors');

console.log('\nMeteor-UP (Staged) : Production Quality Meteor Deployments'.bold.blue);
console.log('------------------------------------------------------------\n'.bold.blue);

// Load action (required) and environment (optional) from command line:
var action = process.argv[2];
var targetEnv = process.argv[3];

// Set target to default environment if none specified:
var DEFAULT_ENVIRONMENT = "default";
if (targetEnv == undefined)
  targetEnv = DEFAULT_ENVIRONMENT;

if (action == "init") {
  // Special setup for init
  ActionsRegistry.init();
} else {
  // Major actions load configuration for environment:
  var cwd = path.resolve(".");
  var config = Config.read(targetEnv);

  if (config.__passwordExists) {
    // Check for sshpass:
    helpers.checkSshPassExists(function(exists){
      if (exists)
        runActions(config, cwd);
      else {
        console.error("sshpass required for password based authentication: refer http://git.io/_vHbvQ".bold.red);
        process.exit(1);
      }
    });
  } else {
    runActions(config, cwd);
  }
}

function runActions(config, cwd) {
  var actionsRegistry = new ActionsRegistry(config, cwd);
  if(actionsRegistry[action]) {
    actionsRegistry[action]();
  } else {
    var errorMessage = 'No Such Action Exists: ' + action;
    console.error(errorMessage.bold.red);
    helpers.printHelp();
  }
}
